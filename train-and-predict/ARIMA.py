"""
This file is part of the conclusion work of my MBA studies on Data Science and
Analytics. Intention of this is to automate execution of an experiment using
ARIMA technic.

Note that part of the code used here was fairly inspired on other sources from
Dr. Sreenivas Bhattiprolu whom I am very thankful. Find original references at
  - https://github.com/bnsreenu/python_for_microscopists/blob/master/163-Intro_to_time_series_Forecasting_using_ARIMA.py
  - https://youtu.be/TSfdvQ0ARwI

@author: Rafael Simionato
"""

import pickle

import pandas as pd
import matplotlib.pyplot as plt
import math

from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose 
from pmdarima.arima import auto_arima
from sklearn.metrics import mean_squared_error

# Reloading df_filtered_cvm generated by cvm-dowloader code
input_file_path = '../cvm-downloader/data/filtered_dataset/df_filtered_cvm.pkl'
with open(input_file_path, 'rb') as f: df_cvm_filtered = pickle.load(f)

# Creating new dataset with the target feature only
df = pd.DataFrame(df_cvm_filtered['VL_QUOTA'])

plt.figure(figsize=(12,8))
plt.plot(df['VL_QUOTA'])
plt.show()

# Filling df with missing dates = (holidays, saturdays and sundays)
start_date = df.iloc[0].name
end_date = df.iloc[len(df)-1].name
df_all_date = pd.DataFrame({'date': pd.date_range(start_date, end_date, freq='d')})
print(df_all_date.dtypes)
df_final = df_all_date.join(df, on='date')

for i in df_final.index:
    if math.isnan(df_final.at[i, 'VL_QUOTA']):
        df_final.at[i, 'VL_QUOTA'] = df_final.at[i-1, 'VL_QUOTA']

df = df_final
df.set_index('date', inplace=True)

# Augmented Dickey-Fuller test
adf, pvalue, usedlag_, nobs_, critical_values_, icbest_ = adfuller(df)
print("pvalue = ", pvalue, " - if above 0.05, data is not stationary")
# And since data is not stationary, we may need SARIMA and not just ARIMA

# Extract and plot trend, seasonal and residuals
decomposed = seasonal_decompose(df['VL_QUOTA'], model ='additive')

trend = decomposed.trend
seasonal = decomposed.seasonal
residual = decomposed.resid

plt.figure(figsize=(12,8))
plt.subplot(411)
plt.plot(df, label='Original', color='blue')
plt.legend(loc='upper left')
plt.subplot(412)
plt.plot(trend, label='Trend', color='blue')
plt.legend(loc='upper left')
plt.subplot(413)
plt.plot(seasonal, label='Seasonal', color='blue')
plt.legend(loc='upper left')
plt.subplot(414)
plt.plot(residual, label='Residual', color='blue')
plt.legend(loc='upper left')
plt.show()

# Using auto arima which should suggest best model based on AIC metric
# Autoarima gives us bet model suited for the data
# p - number of autoregressive terms (AR)
# q - Number of moving avergae terms (MA)
# d - number of non-seasonal differences
# p, d, q represent non-seasonal components
# P, D, Q represent seasonal components
arima_model = auto_arima(df['VL_QUOTA'],
                         start_p = 1, d=1, start_q = 1, 
                         max_p = 25, max_q = 25, max_d=25,
                         m = 7,
                         start_P = 0, D=1, start_Q=0, max_P=25, max_D=25, max_Q=25,
                         seasonal = True,
                         trace = True, 
                         error_action ='ignore',   
                         suppress_warnings = True,  
                         stepwise = True,
                         n_fits=50)

# Print the summary
print(arima_model.summary())

# During the official test for this experiment, I have got following as the best model:
#   SARIMAX(1, 1, 0)x(6, 1, [1, 2], 7)
#
# These values will be applied ahead to configure and fit the model for predictions.

def run_model(model):

    result = model.fit() 
    result.summary() 
    
    # Train prediction
    start_index = 0
    end_index = len(X_train)-1
    train_prediction = result.predict(start_index, end_index).rename( \
        'Predicted VL_QUOTA - for X_train')
    
    # Test prediction
    start_index = len(X_train)
    end_index = len(df)-1
    test_prediction = result.predict(start_index, end_index).rename( \
        'Predicted VL_QUOTA - for X_test')
    
    plt.figure(figsize=(12, 8))
    X_train['VL_QUOTA'].rename('VL_QUOTA - on X_train').plot(legend = True)
    X_test['VL_QUOTA'].rename('VL_QUOTA - on X_test').plot(legend = True)

    # Discarding first point just for ploting purposes
    train_prediction[1:].plot(legend = True, linewidth=2, linestyle='dotted')
    test_prediction.plot(legend = True) 
 
    plt.show()
       
    # Calculating root mean squared error
    trainScore = math.sqrt(mean_squared_error(X_train['VL_QUOTA'], train_prediction))
    print('Train Score: %.6f RMSE' % (trainScore))

    testScore = math.sqrt(mean_squared_error(X_test['VL_QUOTA'], test_prediction))
    print('Test Score: %.6f RMSE' % (testScore))

# Split data into train and test
size = int(len(df) * 0.80)
X_train, X_test = df[0:size], df[size:len(df)]

# Configuring the model with parameters suggested by auto_arima
from statsmodels.tsa.statespace.sarimax import SARIMAX
model = SARIMAX(X_train['VL_QUOTA'], order = (1, 1, 0),  
                seasonal_order =(6, 1, [1, 2], 7))

run_model(model)